{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/han/Desktop/based-streaks/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Database types\nexport interface User {\n  id: number\n  fid: number\n  username: string | null\n  display_name: string | null\n  pfp_url: string | null\n  current_streak: number\n  max_streak: number\n  last_claim_date: string | null\n  total_claims: number\n  referral_count: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface Badge {\n  id: number\n  name: string\n  emoji: string\n  description: string | null\n  required_streak: number | null\n  badge_type: string\n}\n\nexport interface UserBadge {\n  id: number\n  user_id: number\n  badge_id: number\n  earned_at: string\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,IAAA,yMAAY,EAAC,aAAa","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///Users/han/Desktop/based-streaks/app/api/user/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { supabase } from '@/lib/supabase'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams\n    const fid = searchParams.get('fid')\n\n    if (!fid) {\n      return NextResponse.json(\n        { error: 'Missing FID' },\n        { status: 400 }\n      )\n    }\n\n    // Kullanıcı verilerini al\n    const { data: user, error: userError } = await supabase\n      .from('users')\n      .select('*')\n      .eq('fid', fid)\n      .single()\n\n    if (userError && userError.code !== 'PGRST116') {\n      console.error('User fetch error:', userError)\n      return NextResponse.json(\n        { error: 'Database error' },\n        { status: 500 }\n      )\n    }\n\n    // Kullanıcı yoksa boş veri dön\n    if (!user) {\n      return NextResponse.json({\n        fid,\n        streak: 0,\n        hasClaimedToday: false,\n        badges: [],\n        rank: null,\n        totalClaims: 0\n      })\n    }\n\n    // Bugün claim edilmiş mi?\n    const today = new Date()\n    today.setHours(0, 0, 0, 0)\n    const todayStr = today.toISOString().split('T')[0]\n    const hasClaimedToday = user.last_claim_date === todayStr\n\n    // Kullanıcının badge'lerini al\n    const { data: userBadges } = await supabase\n      .from('user_badges')\n      .select(`\n        badge_id,\n        badges (\n          id,\n          name,\n          emoji,\n          description\n        )\n      `)\n      .eq('user_id', user.id)\n\n    const badges = userBadges?.map((ub: any) => ub.badges) || []\n\n    // Leaderboard sıralamasını hesapla\n    const { count } = await supabase\n      .from('users')\n      .select('id', { count: 'exact', head: true })\n      .gt('current_streak', user.current_streak)\n\n    const rank = count !== null ? count + 1 : null\n\n    return NextResponse.json({\n      fid: user.fid,\n      streak: user.current_streak,\n      maxStreak: user.max_streak,\n      hasClaimedToday,\n      badges,\n      rank,\n      totalClaims: user.total_claims,\n      referralCount: user.referral_count\n    })\n\n  } catch (error) {\n    console.error('User fetch error:', error)\n    return NextResponse.json(\n      { error: 'Server error' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,eAAe,QAAQ,OAAO,CAAC,YAAY;QACjD,MAAM,MAAM,aAAa,GAAG,CAAC;QAE7B,IAAI,CAAC,KAAK;YACR,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAc,GACvB;gBAAE,QAAQ;YAAI;QAElB;QAEA,0BAA0B;QAC1B,MAAM,EAAE,MAAM,IAAI,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,6HAAQ,CACpD,IAAI,CAAC,SACL,MAAM,CAAC,KACP,EAAE,CAAC,OAAO,KACV,MAAM;QAET,IAAI,aAAa,UAAU,IAAI,KAAK,YAAY;YAC9C,QAAQ,KAAK,CAAC,qBAAqB;YACnC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiB,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB;gBACA,QAAQ;gBACR,iBAAiB;gBACjB,QAAQ,EAAE;gBACV,MAAM;gBACN,aAAa;YACf;QACF;QAEA,0BAA0B;QAC1B,MAAM,QAAQ,IAAI;QAClB,MAAM,QAAQ,CAAC,GAAG,GAAG,GAAG;QACxB,MAAM,WAAW,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;QAClD,MAAM,kBAAkB,KAAK,eAAe,KAAK;QAEjD,+BAA+B;QAC/B,MAAM,EAAE,MAAM,UAAU,EAAE,GAAG,MAAM,6HAAQ,CACxC,IAAI,CAAC,eACL,MAAM,CAAC,CAAC;;;;;;;;MAQT,CAAC,EACA,EAAE,CAAC,WAAW,KAAK,EAAE;QAExB,MAAM,SAAS,YAAY,IAAI,CAAC,KAAY,GAAG,MAAM,KAAK,EAAE;QAE5D,mCAAmC;QACnC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,6HAAQ,CAC7B,IAAI,CAAC,SACL,MAAM,CAAC,MAAM;YAAE,OAAO;YAAS,MAAM;QAAK,GAC1C,EAAE,CAAC,kBAAkB,KAAK,cAAc;QAE3C,MAAM,OAAO,UAAU,OAAO,QAAQ,IAAI;QAE1C,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,KAAK,KAAK,GAAG;YACb,QAAQ,KAAK,cAAc;YAC3B,WAAW,KAAK,UAAU;YAC1B;YACA;YACA;YACA,aAAa,KAAK,YAAY;YAC9B,eAAe,KAAK,cAAc;QACpC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAe,GACxB;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}